version: '3'

services:
    db:
        container_name: db
        image: postgres:latest
        restart: always
        environment:
          - POSTGRES_DATABASE=postgres
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=postgres
          - TZ=Asia/Taipei
        volumes:
          - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
          - 5432:5432
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres"]
          interval: 10s
          timeout: 5s
          retries: 5
    minio:
        container_name: minio
        image: minio/minio
        hostname: "minio"
        ports:
          - 9000:9000 # API 端口
          - 9001:9001 # 控制台端口
        environment:
          MINIO_ACCESS_KEY: admin
          MINIO_SECRET_KEY: admin123
        command: server --console-address ':9001' /data
        restart: always
    web:
        container_name: web
        # image: halloju/if_gp_ocr_system_web:v1.0.1
        build:
          context: ./web
          dockerfile: Dockerfile.prod
          args: 
            - VITE_APP_VERSION=v1.0.14
        ports:
          - '80:80'
        environment:
          - MODE=development
          - VITE_API_URL=http://localhost/backend/happy
        depends_on:
          - backend
    backend:
        container_name: backend
        build: "backend/."
        ports:
          - "5000:5000"
        command: uvicorn app.main:app --host 0.0.0.0 --port 5000 --reload
        environment:
          - MODE=dev
          - CELERY_BROKER_URL=amqp://rabbitmq
          - CELERY_RESULT_BACKEND=redis://redis:6379/0
        depends_on:
          - db
          - redis
    mlaas:
        container_name: mlaas
        build: "mlaas/."
        ports:
          - "7777:7777"
        command: bash -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 7777 --reload"
        volumes:
          - ./log:/code/app/logger
        environment:
          - MODE=dev
        depends_on:
          db:
            condition: service_healthy
        restart: always
    redis:
        container_name: redis
        image: "redis:6.2.6-alpine"
        ports:
          - "6379:6379"
    rabbitmq:
      container_name: rabbitmq
      image: rabbitmq:rabbitmq:3.9.11-alpine
      ports:
        - 5672:5672
        - 15672:15672
    worker:
      container_name: worker
      build: ./backend
      command: celery worker --app=worker.celery
      volumes:
        - ./log:/code/app/logger
      environment:
        - CELERY_BROKER_URL=amqp://rabbitmq
        - CELERY_RESULT_BACKEND=redis://redis:6379/0
      depends_on:
        - backend
        - redis
        - rabbitmq